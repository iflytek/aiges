// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: EngineService.proto

/*
	Package enginebiz is a generated protocol buffer package.

	It is generated from these files:
		EngineService.proto

	It has these top-level messages:
		MetaData
		EngInputData
		EngOutputData
*/
package enginebiz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 数据类型
type MetaData_DataType int32

const (
	MetaData_TEXT  MetaData_DataType = 0
	MetaData_AUDIO MetaData_DataType = 1
	MetaData_IMAGE MetaData_DataType = 2
	MetaData_VIDEO MetaData_DataType = 3
)

var MetaData_DataType_name = map[int32]string{
	0: "TEXT",
	1: "AUDIO",
	2: "IMAGE",
	3: "VIDEO",
}
var MetaData_DataType_value = map[string]int32{
	"TEXT":  0,
	"AUDIO": 1,
	"IMAGE": 2,
	"VIDEO": 3,
}

func (x MetaData_DataType) String() string {
	return proto.EnumName(MetaData_DataType_name, int32(x))
}
func (MetaData_DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEngineService, []int{0, 0}
}

// 数据状态
type MetaData_DataStatus int32

const (
	MetaData_BEGIN    MetaData_DataStatus = 0
	MetaData_CONTINUE MetaData_DataStatus = 1
	MetaData_END      MetaData_DataStatus = 2
	MetaData_ONCE     MetaData_DataStatus = 3
)

var MetaData_DataStatus_name = map[int32]string{
	0: "BEGIN",
	1: "CONTINUE",
	2: "END",
	3: "ONCE",
}
var MetaData_DataStatus_value = map[string]int32{
	"BEGIN":    0,
	"CONTINUE": 1,
	"END":      2,
	"ONCE":     3,
}

func (x MetaData_DataStatus) String() string {
	return proto.EnumName(MetaData_DataStatus_name, int32(x))
}
func (MetaData_DataStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEngineService, []int{0, 1}
}

// 数据状态
type EngOutputData_DataStatus int32

const (
	EngOutputData_BEGIN    EngOutputData_DataStatus = 0
	EngOutputData_CONTINUE EngOutputData_DataStatus = 1
	EngOutputData_END      EngOutputData_DataStatus = 2
	EngOutputData_ONCE     EngOutputData_DataStatus = 3
)

var EngOutputData_DataStatus_name = map[int32]string{
	0: "BEGIN",
	1: "CONTINUE",
	2: "END",
	3: "ONCE",
}
var EngOutputData_DataStatus_value = map[string]int32{
	"BEGIN":    0,
	"CONTINUE": 1,
	"END":      2,
	"ONCE":     3,
}

func (x EngOutputData_DataStatus) String() string {
	return proto.EnumName(EngOutputData_DataStatus_name, int32(x))
}
func (EngOutputData_DataStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEngineService, []int{2, 0}
}

// 元数据信息
type MetaData struct {
	DataId   string              `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	FrameId  uint32              `protobuf:"varint,2,opt,name=frame_id,json=frameId,proto3" json:"frame_id,omitempty"`
	DataType MetaData_DataType   `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=enginebiz.MetaData_DataType" json:"data_type,omitempty"`
	Status   MetaData_DataStatus `protobuf:"varint,4,opt,name=status,proto3,enum=enginebiz.MetaData_DataStatus" json:"status,omitempty"`
	Format   string              `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	Encoding string              `protobuf:"bytes,6,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Data     []byte              `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Desc     map[string][]byte   `protobuf:"bytes,8,rep,name=desc" json:"desc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MetaData) Reset()                    { *m = MetaData{} }
func (m *MetaData) String() string            { return proto.CompactTextString(m) }
func (*MetaData) ProtoMessage()               {}
func (*MetaData) Descriptor() ([]byte, []int) { return fileDescriptorEngineService, []int{0} }

func (m *MetaData) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *MetaData) GetFrameId() uint32 {
	if m != nil {
		return m.FrameId
	}
	return 0
}

func (m *MetaData) GetDataType() MetaData_DataType {
	if m != nil {
		return m.DataType
	}
	return MetaData_TEXT
}

func (m *MetaData) GetStatus() MetaData_DataStatus {
	if m != nil {
		return m.Status
	}
	return MetaData_BEGIN
}

func (m *MetaData) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *MetaData) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *MetaData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MetaData) GetDesc() map[string][]byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

type EngInputData struct {
	//
	// 业务参数包含用户自定义业务参数及框架约束参数(是否需要区分,避免被重置);
	// 框架参数有如下示例: sub等;
	EngParam map[string]string `protobuf:"bytes,1,rep,name=eng_param,json=engParam" json:"eng_param,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataList []*MetaData       `protobuf:"bytes,2,rep,name=data_list,json=dataList" json:"data_list,omitempty"`
}

func (m *EngInputData) Reset()                    { *m = EngInputData{} }
func (m *EngInputData) String() string            { return proto.CompactTextString(m) }
func (*EngInputData) ProtoMessage()               {}
func (*EngInputData) Descriptor() ([]byte, []int) { return fileDescriptorEngineService, []int{1} }

func (m *EngInputData) GetEngParam() map[string]string {
	if m != nil {
		return m.EngParam
	}
	return nil
}

func (m *EngInputData) GetDataList() []*MetaData {
	if m != nil {
		return m.DataList
	}
	return nil
}

type EngOutputData struct {
	Ret      int32                    `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Err      string                   `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Status   EngOutputData_DataStatus `protobuf:"varint,3,opt,name=status,proto3,enum=enginebiz.EngOutputData_DataStatus" json:"status,omitempty"`
	DataList []*MetaData              `protobuf:"bytes,4,rep,name=data_list,json=dataList" json:"data_list,omitempty"`
}

func (m *EngOutputData) Reset()                    { *m = EngOutputData{} }
func (m *EngOutputData) String() string            { return proto.CompactTextString(m) }
func (*EngOutputData) ProtoMessage()               {}
func (*EngOutputData) Descriptor() ([]byte, []int) { return fileDescriptorEngineService, []int{2} }

func (m *EngOutputData) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *EngOutputData) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *EngOutputData) GetStatus() EngOutputData_DataStatus {
	if m != nil {
		return m.Status
	}
	return EngOutputData_BEGIN
}

func (m *EngOutputData) GetDataList() []*MetaData {
	if m != nil {
		return m.DataList
	}
	return nil
}

func init() {
	proto.RegisterType((*MetaData)(nil), "enginebiz.MetaData")
	proto.RegisterType((*EngInputData)(nil), "enginebiz.EngInputData")
	proto.RegisterType((*EngOutputData)(nil), "enginebiz.EngOutputData")
	proto.RegisterEnum("enginebiz.MetaData_DataType", MetaData_DataType_name, MetaData_DataType_value)
	proto.RegisterEnum("enginebiz.MetaData_DataStatus", MetaData_DataStatus_name, MetaData_DataStatus_value)
	proto.RegisterEnum("enginebiz.EngOutputData_DataStatus", EngOutputData_DataStatus_name, EngOutputData_DataStatus_value)
}
func (m *MetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DataId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(len(m.DataId)))
		i += copy(dAtA[i:], m.DataId)
	}
	if m.FrameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(m.FrameId))
	}
	if m.DataType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(m.DataType))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(m.Status))
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Encoding) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(len(m.Encoding)))
		i += copy(dAtA[i:], m.Encoding)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Desc) > 0 {
		for k, _ := range m.Desc {
			dAtA[i] = 0x42
			i++
			v := m.Desc[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovEngineService(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovEngineService(uint64(len(k))) + byteSize
			i = encodeVarintEngineService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEngineService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintEngineService(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func (m *EngInputData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngInputData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EngParam) > 0 {
		for k, _ := range m.EngParam {
			dAtA[i] = 0xa
			i++
			v := m.EngParam[k]
			mapSize := 1 + len(k) + sovEngineService(uint64(len(k))) + 1 + len(v) + sovEngineService(uint64(len(v)))
			i = encodeVarintEngineService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEngineService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEngineService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.DataList) > 0 {
		for _, msg := range m.DataList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEngineService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EngOutputData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngOutputData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(m.Ret))
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEngineService(dAtA, i, uint64(m.Status))
	}
	if len(m.DataList) > 0 {
		for _, msg := range m.DataList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintEngineService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEngineService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MetaData) Size() (n int) {
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovEngineService(uint64(l))
	}
	if m.FrameId != 0 {
		n += 1 + sovEngineService(uint64(m.FrameId))
	}
	if m.DataType != 0 {
		n += 1 + sovEngineService(uint64(m.DataType))
	}
	if m.Status != 0 {
		n += 1 + sovEngineService(uint64(m.Status))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovEngineService(uint64(l))
	}
	l = len(m.Encoding)
	if l > 0 {
		n += 1 + l + sovEngineService(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEngineService(uint64(l))
	}
	if len(m.Desc) > 0 {
		for k, v := range m.Desc {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovEngineService(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovEngineService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovEngineService(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EngInputData) Size() (n int) {
	var l int
	_ = l
	if len(m.EngParam) > 0 {
		for k, v := range m.EngParam {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEngineService(uint64(len(k))) + 1 + len(v) + sovEngineService(uint64(len(v)))
			n += mapEntrySize + 1 + sovEngineService(uint64(mapEntrySize))
		}
	}
	if len(m.DataList) > 0 {
		for _, e := range m.DataList {
			l = e.Size()
			n += 1 + l + sovEngineService(uint64(l))
		}
	}
	return n
}

func (m *EngOutputData) Size() (n int) {
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovEngineService(uint64(m.Ret))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovEngineService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEngineService(uint64(m.Status))
	}
	if len(m.DataList) > 0 {
		for _, e := range m.DataList {
			l = e.Size()
			n += 1 + l + sovEngineService(uint64(l))
		}
	}
	return n
}

func sovEngineService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEngineService(x uint64) (n int) {
	return sovEngineService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameId", wireType)
			}
			m.FrameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= (MetaData_DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (MetaData_DataStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desc == nil {
				m.Desc = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEngineService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEngineService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEngineService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEngineService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthEngineService
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEngineService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEngineService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Desc[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngInputData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngInputData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngInputData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EngParam == nil {
				m.EngParam = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEngineService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEngineService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEngineService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEngineService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEngineService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEngineService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEngineService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EngParam[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataList = append(m.DataList, &MetaData{})
			if err := m.DataList[len(m.DataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngOutputData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngOutputData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngOutputData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (EngOutputData_DataStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngineService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataList = append(m.DataList, &MetaData{})
			if err := m.DataList[len(m.DataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngineService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEngineService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEngineService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngineService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEngineService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEngineService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEngineService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEngineService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEngineService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("EngineService.proto", fileDescriptorEngineService) }

var fileDescriptorEngineService = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xda, 0x8e, 0x63, 0x0f, 0x29, 0x5a, 0x6d, 0x11, 0x98, 0x08, 0x2c, 0x2b, 0x08, 0xc9,
	0xa7, 0x08, 0x8a, 0x80, 0x42, 0x4f, 0x4d, 0xb3, 0xaa, 0x2c, 0x51, 0x1b, 0xb9, 0x29, 0xe2, 0x56,
	0x6d, 0xe3, 0x6d, 0x64, 0xd1, 0x38, 0x96, 0xbd, 0xa9, 0x14, 0xbe, 0x84, 0xdf, 0xe1, 0xc6, 0x91,
	0x13, 0x27, 0x0e, 0x28, 0xfc, 0x08, 0xda, 0xb5, 0x93, 0x26, 0x52, 0x10, 0xa8, 0x97, 0xe8, 0xbd,
	0xdd, 0x99, 0xb7, 0x79, 0x6f, 0xc6, 0xb0, 0x4b, 0xb3, 0x71, 0x9a, 0xf1, 0x53, 0x5e, 0x5c, 0xa7,
	0x23, 0xde, 0xcb, 0x8b, 0xa9, 0x98, 0x12, 0x9b, 0xab, 0xc3, 0x8b, 0xf4, 0x73, 0xf7, 0x87, 0x0e,
	0xd6, 0x09, 0x17, 0x6c, 0xc0, 0x04, 0x23, 0x0f, 0xa0, 0x95, 0x30, 0xc1, 0xce, 0xd3, 0xc4, 0x41,
	0x1e, 0xf2, 0xed, 0xd8, 0x94, 0x34, 0x48, 0xc8, 0x43, 0xb0, 0x2e, 0x0b, 0x36, 0xe1, 0xf2, 0x46,
	0xf3, 0x90, 0xbf, 0x13, 0xb7, 0x14, 0x0f, 0x12, 0xf2, 0x06, 0x6c, 0xd5, 0x23, 0xe6, 0x39, 0x77,
	0x74, 0x0f, 0xf9, 0x77, 0xf7, 0x1e, 0xf5, 0x56, 0xfa, 0xbd, 0xa5, 0x76, 0x4f, 0xfe, 0x0c, 0xe7,
	0x39, 0x8f, 0xad, 0xa4, 0x46, 0xe4, 0x15, 0x98, 0xa5, 0x60, 0x62, 0x56, 0x3a, 0x86, 0xea, 0x73,
	0xff, 0xd6, 0x77, 0xaa, 0xaa, 0xe2, 0xba, 0x9a, 0xdc, 0x07, 0xf3, 0x72, 0x5a, 0x4c, 0x98, 0x70,
	0x9a, 0xd5, 0xbf, 0xac, 0x18, 0xe9, 0x80, 0xc5, 0xb3, 0xd1, 0x34, 0x49, 0xb3, 0xb1, 0x63, 0xaa,
	0x9b, 0x15, 0x27, 0x04, 0x0c, 0xf9, 0xae, 0xd3, 0xf2, 0x90, 0xdf, 0x8e, 0x15, 0x26, 0xcf, 0xc1,
	0x48, 0x78, 0x39, 0x72, 0x2c, 0x4f, 0xf7, 0xef, 0xec, 0x3d, 0xde, 0xfa, 0x3a, 0x2f, 0x47, 0x34,
	0x13, 0xc5, 0x3c, 0x56, 0xa5, 0x9d, 0xd7, 0x60, 0xaf, 0x8e, 0x08, 0x06, 0xfd, 0x13, 0x9f, 0xd7,
	0x51, 0x49, 0x48, 0xee, 0x41, 0xf3, 0x9a, 0x5d, 0xcd, 0xb8, 0x0a, 0xa9, 0x1d, 0x57, 0xe4, 0xad,
	0xb6, 0x8f, 0xba, 0x2f, 0xc1, 0x5a, 0x26, 0x40, 0x2c, 0x30, 0x86, 0xf4, 0xe3, 0x10, 0x37, 0x88,
	0x0d, 0xcd, 0xc3, 0xb3, 0x41, 0x10, 0x61, 0x24, 0x61, 0x70, 0x72, 0x78, 0x4c, 0xb1, 0x26, 0xe1,
	0x87, 0x60, 0x40, 0x23, 0xac, 0x77, 0xf7, 0x01, 0x6e, 0x02, 0x90, 0x17, 0x7d, 0x7a, 0x1c, 0x84,
	0xb8, 0x41, 0xda, 0x60, 0x1d, 0x45, 0xe1, 0x30, 0x08, 0xcf, 0x28, 0x46, 0xa4, 0x05, 0x3a, 0x0d,
	0x07, 0x58, 0x93, 0xd2, 0x51, 0x78, 0x44, 0xb1, 0xde, 0xfd, 0x8a, 0xa0, 0x4d, 0xb3, 0x71, 0x90,
	0xe5, 0x33, 0xa1, 0x86, 0xdb, 0x07, 0x39, 0xf6, 0xf3, 0x9c, 0x15, 0x6c, 0xe2, 0x20, 0x65, 0xf9,
	0xe9, 0x9a, 0xe5, 0xf5, 0x5a, 0x49, 0xde, 0xcb, 0xba, 0xca, 0xba, 0xc5, 0x6b, 0x4a, 0x9e, 0xd5,
	0xc3, 0xbe, 0x4a, 0x4b, 0xe1, 0x68, 0x4a, 0x63, 0x77, 0x4b, 0x6c, 0xd5, 0x8c, 0xdf, 0xa5, 0xa5,
	0xe8, 0x1c, 0xc0, 0xce, 0x86, 0xd8, 0xbf, 0x42, 0xb3, 0xd7, 0x43, 0xfb, 0x89, 0x54, 0x77, 0x34,
	0x13, 0x4b, 0x13, 0x18, 0xf4, 0x82, 0x0b, 0xd5, 0xdd, 0x8c, 0x25, 0x94, 0x27, 0xbc, 0x28, 0xea,
	0x5e, 0x09, 0xc9, 0xc1, 0x6a, 0xad, 0xaa, 0x75, 0x7c, 0xb2, 0xe9, 0xf2, 0x46, 0x6d, 0xdb, 0x6e,
	0x6d, 0x38, 0x34, 0xfe, 0xc3, 0xe1, 0xed, 0x47, 0xd4, 0xc7, 0xdf, 0x16, 0x2e, 0xfa, 0xbe, 0x70,
	0xd1, 0xaf, 0x85, 0x8b, 0xbe, 0xfc, 0x76, 0x1b, 0x17, 0xa6, 0xfa, 0x3e, 0x5f, 0xfc, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x41, 0xda, 0xed, 0xc3, 0xb6, 0x03, 0x00, 0x00,
}
