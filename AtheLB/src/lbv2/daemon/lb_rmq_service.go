// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package daemon

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type MTRProtocol int64

const (
	MTRProtocol_RAW          MTRProtocol = 0
	MTRProtocol_PERSONALIZED MTRProtocol = 1
)

func (p MTRProtocol) String() string {
	switch p {
	case MTRProtocol_RAW:
		return "RAW"
	case MTRProtocol_PERSONALIZED:
		return "PERSONALIZED"
	}
	return "<UNSET>"
}

func MTRProtocolFromString(s string) (MTRProtocol, error) {
	switch s {
	case "RAW":
		return MTRProtocol_RAW, nil
	case "PERSONALIZED":
		return MTRProtocol_PERSONALIZED, nil
	}
	return MTRProtocol(0), fmt.Errorf("not a valid MTRProtocol string")
}

func MTRProtocolPtr(v MTRProtocol) *MTRProtocol { return &v }

func (p MTRProtocol) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MTRProtocol) UnmarshalText(text []byte) error {
	q, err := MTRProtocolFromString(string(text))
	if nil != err {
		return err
	}
	*p = q
	return nil
}

func (p *MTRProtocol) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = MTRProtocol(v)
	return nil
}

func (p *MTRProtocol) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type MTRRPCErrorCode int64

const (
	MTRRPCErrorCode_MTR_SUCCESS                           MTRRPCErrorCode = 0
	MTRRPCErrorCode_MTR_RPC_ERROR_BASE                    MTRRPCErrorCode = 33000
	MTRRPCErrorCode_MTR_RPC_ERROR_NO_MORE_DATA            MTRRPCErrorCode = 33001
	MTRRPCErrorCode_MTR_RPC_MESSAGE_IS_NULL               MTRRPCErrorCode = 33002
	MTRRPCErrorCode_MTR_PRODUCE_FAILURE                   MTRRPCErrorCode = 33005
	MTRRPCErrorCode_MTR_TOPIC_NOT_EXITST                  MTRRPCErrorCode = 33006
	MTRRPCErrorCode_MTR_GROUP_NOT_EXITST                  MTRRPCErrorCode = 33007
	MTRRPCErrorCode_MTR_TOPIC_ALREADY_EXITST              MTRRPCErrorCode = 33008
	MTRRPCErrorCode_MTR_GROUP_ALREADY_EXITST              MTRRPCErrorCode = 33009
	MTRRPCErrorCode_MTR_RECALL_CONSUME_FINISHED           MTRRPCErrorCode = 33010
	MTRRPCErrorCode_MTR_RECALL_CONSUME_ERROR              MTRRPCErrorCode = 33011
	MTRRPCErrorCode_MTR_GROUPS_NOT_EXITST                 MTRRPCErrorCode = 33012
	MTRRPCErrorCode_MTR_ERROR_BASE                        MTRRPCErrorCode = 33100
	MTRRPCErrorCode_MTR_MESSAGE_IS_NULL                   MTRRPCErrorCode = 33102
	MTRRPCErrorCode_MTR_UNKNOW_HOST_EXCEPTION             MTRRPCErrorCode = 33110
	MTRRPCErrorCode_MTR_CONSUME_NO_MORE_DATA              MTRRPCErrorCode = 33101
	MTRRPCErrorCode_MTR_PRODUCE_UNKNOW_FAILURE            MTRRPCErrorCode = 33105
	MTRRPCErrorCode_MTR_PRODUCE_CLIENT_EXCEPTION          MTRRPCErrorCode = 33106
	MTRRPCErrorCode_MTR_PRODUCE_BROKER_EXCEPTION          MTRRPCErrorCode = 33107
	MTRRPCErrorCode_MTR_PRODUCE_REMOTING_EXCEPTION        MTRRPCErrorCode = 33108
	MTRRPCErrorCode_MTR_PRODUCE_INTERRUPTED_EXCEPTION     MTRRPCErrorCode = 33109
	MTRRPCErrorCode_MTR_CONSUME_SUBSCRIBE_EXCEPTION       MTRRPCErrorCode = 33113
	MTRRPCErrorCode_MTR_PRODUCE_START_EXCEPTION           MTRRPCErrorCode = 33111
	MTRRPCErrorCode_MTR_CONSUME_START_EXCEPTION           MTRRPCErrorCode = 33112
	MTRRPCErrorCode_MTR_RPT_PRODUCE_CLIENT_EXCEPTION      MTRRPCErrorCode = 33114
	MTRRPCErrorCode_MTR_RPT_CONSUME_START_EXCEPTION       MTRRPCErrorCode = 33115
	MTRRPCErrorCode_MTR_RPT_CONSUME_SUBSCRIBE_EXCEPTION   MTRRPCErrorCode = 33116
	MTRRPCErrorCode_MTR_RPT_PRODUCE_REMOTING_EXCEPTION    MTRRPCErrorCode = 33117
	MTRRPCErrorCode_MTR_RPT_PRODUCE_BROKER_EXCEPTION      MTRRPCErrorCode = 33118
	MTRRPCErrorCode_MTR_RPT_PRODUCE_INTERRUPTED_EXCEPTION MTRRPCErrorCode = 33119
)

func (p MTRRPCErrorCode) String() string {
	switch p {
	case MTRRPCErrorCode_MTR_SUCCESS:
		return "MTR_SUCCESS"
	case MTRRPCErrorCode_MTR_RPC_ERROR_BASE:
		return "MTR_RPC_ERROR_BASE"
	case MTRRPCErrorCode_MTR_RPC_ERROR_NO_MORE_DATA:
		return "MTR_RPC_ERROR_NO_MORE_DATA"
	case MTRRPCErrorCode_MTR_RPC_MESSAGE_IS_NULL:
		return "MTR_RPC_MESSAGE_IS_NULL"
	case MTRRPCErrorCode_MTR_PRODUCE_FAILURE:
		return "MTR_PRODUCE_FAILURE"
	case MTRRPCErrorCode_MTR_TOPIC_NOT_EXITST:
		return "MTR_TOPIC_NOT_EXITST"
	case MTRRPCErrorCode_MTR_GROUP_NOT_EXITST:
		return "MTR_GROUP_NOT_EXITST"
	case MTRRPCErrorCode_MTR_TOPIC_ALREADY_EXITST:
		return "MTR_TOPIC_ALREADY_EXITST"
	case MTRRPCErrorCode_MTR_GROUP_ALREADY_EXITST:
		return "MTR_GROUP_ALREADY_EXITST"
	case MTRRPCErrorCode_MTR_RECALL_CONSUME_FINISHED:
		return "MTR_RECALL_CONSUME_FINISHED"
	case MTRRPCErrorCode_MTR_RECALL_CONSUME_ERROR:
		return "MTR_RECALL_CONSUME_ERROR"
	case MTRRPCErrorCode_MTR_GROUPS_NOT_EXITST:
		return "MTR_GROUPS_NOT_EXITST"
	case MTRRPCErrorCode_MTR_ERROR_BASE:
		return "MTR_ERROR_BASE"
	case MTRRPCErrorCode_MTR_MESSAGE_IS_NULL:
		return "MTR_MESSAGE_IS_NULL"
	case MTRRPCErrorCode_MTR_UNKNOW_HOST_EXCEPTION:
		return "MTR_UNKNOW_HOST_EXCEPTION"
	case MTRRPCErrorCode_MTR_CONSUME_NO_MORE_DATA:
		return "MTR_CONSUME_NO_MORE_DATA"
	case MTRRPCErrorCode_MTR_PRODUCE_UNKNOW_FAILURE:
		return "MTR_PRODUCE_UNKNOW_FAILURE"
	case MTRRPCErrorCode_MTR_PRODUCE_CLIENT_EXCEPTION:
		return "MTR_PRODUCE_CLIENT_EXCEPTION"
	case MTRRPCErrorCode_MTR_PRODUCE_BROKER_EXCEPTION:
		return "MTR_PRODUCE_BROKER_EXCEPTION"
	case MTRRPCErrorCode_MTR_PRODUCE_REMOTING_EXCEPTION:
		return "MTR_PRODUCE_REMOTING_EXCEPTION"
	case MTRRPCErrorCode_MTR_PRODUCE_INTERRUPTED_EXCEPTION:
		return "MTR_PRODUCE_INTERRUPTED_EXCEPTION"
	case MTRRPCErrorCode_MTR_CONSUME_SUBSCRIBE_EXCEPTION:
		return "MTR_CONSUME_SUBSCRIBE_EXCEPTION"
	case MTRRPCErrorCode_MTR_PRODUCE_START_EXCEPTION:
		return "MTR_PRODUCE_START_EXCEPTION"
	case MTRRPCErrorCode_MTR_CONSUME_START_EXCEPTION:
		return "MTR_CONSUME_START_EXCEPTION"
	case MTRRPCErrorCode_MTR_RPT_PRODUCE_CLIENT_EXCEPTION:
		return "MTR_RPT_PRODUCE_CLIENT_EXCEPTION"
	case MTRRPCErrorCode_MTR_RPT_CONSUME_START_EXCEPTION:
		return "MTR_RPT_CONSUME_START_EXCEPTION"
	case MTRRPCErrorCode_MTR_RPT_CONSUME_SUBSCRIBE_EXCEPTION:
		return "MTR_RPT_CONSUME_SUBSCRIBE_EXCEPTION"
	case MTRRPCErrorCode_MTR_RPT_PRODUCE_REMOTING_EXCEPTION:
		return "MTR_RPT_PRODUCE_REMOTING_EXCEPTION"
	case MTRRPCErrorCode_MTR_RPT_PRODUCE_BROKER_EXCEPTION:
		return "MTR_RPT_PRODUCE_BROKER_EXCEPTION"
	case MTRRPCErrorCode_MTR_RPT_PRODUCE_INTERRUPTED_EXCEPTION:
		return "MTR_RPT_PRODUCE_INTERRUPTED_EXCEPTION"
	}
	return "<UNSET>"
}

func MTRRPCErrorCodeFromString(s string) (MTRRPCErrorCode, error) {
	switch s {
	case "MTR_SUCCESS":
		return MTRRPCErrorCode_MTR_SUCCESS, nil
	case "MTR_RPC_ERROR_BASE":
		return MTRRPCErrorCode_MTR_RPC_ERROR_BASE, nil
	case "MTR_RPC_ERROR_NO_MORE_DATA":
		return MTRRPCErrorCode_MTR_RPC_ERROR_NO_MORE_DATA, nil
	case "MTR_RPC_MESSAGE_IS_NULL":
		return MTRRPCErrorCode_MTR_RPC_MESSAGE_IS_NULL, nil
	case "MTR_PRODUCE_FAILURE":
		return MTRRPCErrorCode_MTR_PRODUCE_FAILURE, nil
	case "MTR_TOPIC_NOT_EXITST":
		return MTRRPCErrorCode_MTR_TOPIC_NOT_EXITST, nil
	case "MTR_GROUP_NOT_EXITST":
		return MTRRPCErrorCode_MTR_GROUP_NOT_EXITST, nil
	case "MTR_TOPIC_ALREADY_EXITST":
		return MTRRPCErrorCode_MTR_TOPIC_ALREADY_EXITST, nil
	case "MTR_GROUP_ALREADY_EXITST":
		return MTRRPCErrorCode_MTR_GROUP_ALREADY_EXITST, nil
	case "MTR_RECALL_CONSUME_FINISHED":
		return MTRRPCErrorCode_MTR_RECALL_CONSUME_FINISHED, nil
	case "MTR_RECALL_CONSUME_ERROR":
		return MTRRPCErrorCode_MTR_RECALL_CONSUME_ERROR, nil
	case "MTR_GROUPS_NOT_EXITST":
		return MTRRPCErrorCode_MTR_GROUPS_NOT_EXITST, nil
	case "MTR_ERROR_BASE":
		return MTRRPCErrorCode_MTR_ERROR_BASE, nil
	case "MTR_MESSAGE_IS_NULL":
		return MTRRPCErrorCode_MTR_MESSAGE_IS_NULL, nil
	case "MTR_UNKNOW_HOST_EXCEPTION":
		return MTRRPCErrorCode_MTR_UNKNOW_HOST_EXCEPTION, nil
	case "MTR_CONSUME_NO_MORE_DATA":
		return MTRRPCErrorCode_MTR_CONSUME_NO_MORE_DATA, nil
	case "MTR_PRODUCE_UNKNOW_FAILURE":
		return MTRRPCErrorCode_MTR_PRODUCE_UNKNOW_FAILURE, nil
	case "MTR_PRODUCE_CLIENT_EXCEPTION":
		return MTRRPCErrorCode_MTR_PRODUCE_CLIENT_EXCEPTION, nil
	case "MTR_PRODUCE_BROKER_EXCEPTION":
		return MTRRPCErrorCode_MTR_PRODUCE_BROKER_EXCEPTION, nil
	case "MTR_PRODUCE_REMOTING_EXCEPTION":
		return MTRRPCErrorCode_MTR_PRODUCE_REMOTING_EXCEPTION, nil
	case "MTR_PRODUCE_INTERRUPTED_EXCEPTION":
		return MTRRPCErrorCode_MTR_PRODUCE_INTERRUPTED_EXCEPTION, nil
	case "MTR_CONSUME_SUBSCRIBE_EXCEPTION":
		return MTRRPCErrorCode_MTR_CONSUME_SUBSCRIBE_EXCEPTION, nil
	case "MTR_PRODUCE_START_EXCEPTION":
		return MTRRPCErrorCode_MTR_PRODUCE_START_EXCEPTION, nil
	case "MTR_CONSUME_START_EXCEPTION":
		return MTRRPCErrorCode_MTR_CONSUME_START_EXCEPTION, nil
	case "MTR_RPT_PRODUCE_CLIENT_EXCEPTION":
		return MTRRPCErrorCode_MTR_RPT_PRODUCE_CLIENT_EXCEPTION, nil
	case "MTR_RPT_CONSUME_START_EXCEPTION":
		return MTRRPCErrorCode_MTR_RPT_CONSUME_START_EXCEPTION, nil
	case "MTR_RPT_CONSUME_SUBSCRIBE_EXCEPTION":
		return MTRRPCErrorCode_MTR_RPT_CONSUME_SUBSCRIBE_EXCEPTION, nil
	case "MTR_RPT_PRODUCE_REMOTING_EXCEPTION":
		return MTRRPCErrorCode_MTR_RPT_PRODUCE_REMOTING_EXCEPTION, nil
	case "MTR_RPT_PRODUCE_BROKER_EXCEPTION":
		return MTRRPCErrorCode_MTR_RPT_PRODUCE_BROKER_EXCEPTION, nil
	case "MTR_RPT_PRODUCE_INTERRUPTED_EXCEPTION":
		return MTRRPCErrorCode_MTR_RPT_PRODUCE_INTERRUPTED_EXCEPTION, nil
	}
	return MTRRPCErrorCode(0), fmt.Errorf("not a valid MTRRPCErrorCode string")
}

func MTRRPCErrorCodePtr(v MTRRPCErrorCode) *MTRRPCErrorCode { return &v }

func (p MTRRPCErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MTRRPCErrorCode) UnmarshalText(text []byte) error {
	q, err := MTRRPCErrorCodeFromString(string(text))
	if nil != err {
		return err
	}
	*p = q
	return nil
}

func (p *MTRRPCErrorCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = MTRRPCErrorCode(v)
	return nil
}

func (p *MTRRPCErrorCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Topic
//  - Body
//  - Protocol
//  - Key
//  - Flag
//  - Tag
//  - Offset
type MTRMessage struct {
	Topic    string      `thrift:"topic,1" db:"topic" json:"topic"`
	Body     []byte      `thrift:"body,2" db:"body" json:"body"`
	Protocol MTRProtocol `thrift:"protocol,3" db:"protocol" json:"protocol"`
	Key      string      `thrift:"key,4" db:"key" json:"key"`
	Flag     int32       `thrift:"flag,5" db:"flag" json:"flag"`
	Tag      string      `thrift:"tag,6" db:"tag" json:"tag"`
	Offset   int64       `thrift:"offset,7" db:"offset" json:"offset"`
}

func NewMTRMessage() *MTRMessage {
	return &MTRMessage{}
}

func (p *MTRMessage) GetTopic() string {
	return p.Topic
}

func (p *MTRMessage) GetBody() []byte {
	return p.Body
}

func (p *MTRMessage) GetProtocol() MTRProtocol {
	return p.Protocol
}

func (p *MTRMessage) GetKey() string {
	return p.Key
}

func (p *MTRMessage) GetFlag() int32 {
	return p.Flag
}

func (p *MTRMessage) GetTag() string {
	return p.Tag
}

func (p *MTRMessage) GetOffset() int64 {
	return p.Offset
}
func (p *MTRMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); nil != err {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if nil != err {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessage) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessage) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *MTRMessage) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := MTRProtocol(v)
		p.Protocol = temp
	}
	return nil
}

func (p *MTRMessage) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *MTRMessage) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Flag = v
	}
	return nil
}

func (p *MTRMessage) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Tag = v
	}
	return nil
}

func (p *MTRMessage) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *MTRMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MTRMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err)
	}
	if err := oprot.WriteBinary(p.Body); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err)
	}
	return err
}

func (p *MTRMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("protocol", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:protocol: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Protocol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.protocol (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:protocol: ", p), err)
	}
	return err
}

func (p *MTRMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:key: ", p), err)
	}
	return err
}

func (p *MTRMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flag", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flag: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Flag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flag (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flag: ", p), err)
	}
	return err
}

func (p *MTRMessage) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tag: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tag (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tag: ", p), err)
	}
	return err
}

func (p *MTRMessage) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:offset: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:offset: ", p), err)
	}
	return err
}

func (p *MTRMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessage(%+v)", *p)
}

// Attributes:
//  - Group
//  - Diff
//  - Tps
//  - Topic
type MTRMonitorInfo struct {
	Group string `thrift:"group,1" db:"group" json:"group"`
	Diff  string `thrift:"diff,2" db:"diff" json:"diff"`
	Tps   string `thrift:"tps,3" db:"tps" json:"tps"`
	Topic string `thrift:"topic,4" db:"topic" json:"topic"`
}

func NewMTRMonitorInfo() *MTRMonitorInfo {
	return &MTRMonitorInfo{}
}

func (p *MTRMonitorInfo) GetGroup() string {
	return p.Group
}

func (p *MTRMonitorInfo) GetDiff() string {
	return p.Diff
}

func (p *MTRMonitorInfo) GetTps() string {
	return p.Tps
}

func (p *MTRMonitorInfo) GetTopic() string {
	return p.Topic
}
func (p *MTRMonitorInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMonitorInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *MTRMonitorInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Diff = v
	}
	return nil
}

func (p *MTRMonitorInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tps = v
	}
	return nil
}

func (p *MTRMonitorInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMonitorInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MTRMonitorInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMonitorInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group: ", p), err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group: ", p), err)
	}
	return err
}

func (p *MTRMonitorInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("diff", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:diff: ", p), err)
	}
	if err := oprot.WriteString(string(p.Diff)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.diff (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:diff: ", p), err)
	}
	return err
}

func (p *MTRMonitorInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tps", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tps: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tps)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tps (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tps: ", p), err)
	}
	return err
}

func (p *MTRMonitorInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topic: ", p), err)
	}
	return err
}

func (p *MTRMonitorInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMonitorInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - Msg
//  - ErrorCode
type MTRRPCException struct {
	ID        MTRRPCErrorCode `thrift:"id,1,required" db:"id" json:"id"`
	Msg       string          `thrift:"msg,2" db:"msg" json:"msg"`
	ErrorCode int32           `thrift:"errorCode,3" db:"errorCode" json:"errorCode"`
}

func NewMTRRPCException() *MTRRPCException {
	return &MTRRPCException{}
}

func (p *MTRRPCException) GetID() MTRRPCErrorCode {
	return p.ID
}

func (p *MTRRPCException) GetMsg() string {
	return p.Msg
}

func (p *MTRRPCException) GetErrorCode() int32 {
	return p.ErrorCode
}
func (p *MTRRPCException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *MTRRPCException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := MTRRPCErrorCode(v)
		p.ID = temp
	}
	return nil
}

func (p *MTRRPCException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MTRRPCException) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *MTRRPCException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MTRRPCException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRRPCException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MTRRPCException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *MTRRPCException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errorCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errorCode: ", p), err)
	}
	return err
}

func (p *MTRRPCException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRRPCException(%+v)", *p)
}

func (p *MTRRPCException) Error() string {
	return p.String()
}

type MTRMessageService interface {
	// Parameters:
	//  - Msg
	//  - Flush
	Produce(msg *MTRMessage, flush bool) (r int64, err error)
	// Parameters:
	//  - Topic
	//  - Group
	Consume(topic string, group string) (r *MTRMessage, err error)
	// Parameters:
	//  - Topic
	//  - Offset
	ConsumeWithOffset(topic string, offset int64) (r *MTRMessage, err error)
	// Parameters:
	//  - Topic
	//  - BeginDate
	//  - EndDate
	ReConsumeByDate(topic string, beginDate string, endDate string) (r *MTRMessage, err error)
	// Parameters:
	//  - Topic
	ShowTopicInfo(topic string) (r string, err error)
	// Parameters:
	//  - Topic
	CreateTopic(topic string) (r int64, err error)
	// Parameters:
	//  - Topic
	DeleteTopic(topic string) (r int64, err error)
	// Parameters:
	//  - Topic
	//  - Group
	CreateGroup(topic string, group string) (r int64, err error)
	// Parameters:
	//  - Topic
	//  - Group
	DeleteGroup(topic string, group string) (r int64, err error)
	FetchMonitorInfo() (r []*MTRMonitorInfo, err error)
}

type MTRMessageServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMTRMessageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MTRMessageServiceClient {
	return &MTRMessageServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMTRMessageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MTRMessageServiceClient {
	return &MTRMessageServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Msg
//  - Flush
func (p *MTRMessageServiceClient) Produce(msg *MTRMessage, flush bool) (r int64, err error) {
	if err = p.sendProduce(msg, flush); err != nil {
		return
	}
	return p.recvProduce()
}

func (p *MTRMessageServiceClient) sendProduce(msg *MTRMessage, flush bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("produce", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceProduceArgs{
		Msg:   msg,
		Flush: flush,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvProduce() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "produce" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "produce failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "produce failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "produce failed: invalid message type")
		return
	}
	result := MTRMessageServiceProduceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
//  - Group
func (p *MTRMessageServiceClient) Consume(topic string, group string) (r *MTRMessage, err error) {
	if err = p.sendConsume(topic, group); err != nil {
		return
	}
	return p.recvConsume()
}

func (p *MTRMessageServiceClient) sendConsume(topic string, group string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("consume", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceConsumeArgs{
		Topic: topic,
		Group: group,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvConsume() (value *MTRMessage, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "consume" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "consume failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "consume failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "consume failed: invalid message type")
		return
	}
	result := MTRMessageServiceConsumeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
//  - Offset
func (p *MTRMessageServiceClient) ConsumeWithOffset(topic string, offset int64) (r *MTRMessage, err error) {
	if err = p.sendConsumeWithOffset(topic, offset); err != nil {
		return
	}
	return p.recvConsumeWithOffset()
}

func (p *MTRMessageServiceClient) sendConsumeWithOffset(topic string, offset int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("consumeWithOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceConsumeWithOffsetArgs{
		Topic:  topic,
		Offset: offset,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvConsumeWithOffset() (value *MTRMessage, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "consumeWithOffset" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "consumeWithOffset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "consumeWithOffset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "consumeWithOffset failed: invalid message type")
		return
	}
	result := MTRMessageServiceConsumeWithOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
//  - BeginDate
//  - EndDate
func (p *MTRMessageServiceClient) ReConsumeByDate(topic string, beginDate string, endDate string) (r *MTRMessage, err error) {
	if err = p.sendReConsumeByDate(topic, beginDate, endDate); err != nil {
		return
	}
	return p.recvReConsumeByDate()
}

func (p *MTRMessageServiceClient) sendReConsumeByDate(topic string, beginDate string, endDate string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reConsumeByDate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceReConsumeByDateArgs{
		Topic:     topic,
		BeginDate: beginDate,
		EndDate:   endDate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvReConsumeByDate() (value *MTRMessage, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reConsumeByDate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reConsumeByDate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reConsumeByDate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reConsumeByDate failed: invalid message type")
		return
	}
	result := MTRMessageServiceReConsumeByDateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
func (p *MTRMessageServiceClient) ShowTopicInfo(topic string) (r string, err error) {
	if err = p.sendShowTopicInfo(topic); err != nil {
		return
	}
	return p.recvShowTopicInfo()
}

func (p *MTRMessageServiceClient) sendShowTopicInfo(topic string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("showTopicInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceShowTopicInfoArgs{
		Topic: topic,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvShowTopicInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "showTopicInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "showTopicInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "showTopicInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "showTopicInfo failed: invalid message type")
		return
	}
	result := MTRMessageServiceShowTopicInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
func (p *MTRMessageServiceClient) CreateTopic(topic string) (r int64, err error) {
	if err = p.sendCreateTopic(topic); err != nil {
		return
	}
	return p.recvCreateTopic()
}

func (p *MTRMessageServiceClient) sendCreateTopic(topic string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createTopic", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceCreateTopicArgs{
		Topic: topic,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvCreateTopic() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createTopic" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createTopic failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createTopic failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTopic failed: invalid message type")
		return
	}
	result := MTRMessageServiceCreateTopicResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
func (p *MTRMessageServiceClient) DeleteTopic(topic string) (r int64, err error) {
	if err = p.sendDeleteTopic(topic); err != nil {
		return
	}
	return p.recvDeleteTopic()
}

func (p *MTRMessageServiceClient) sendDeleteTopic(topic string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTopic", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceDeleteTopicArgs{
		Topic: topic,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvDeleteTopic() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteTopic" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteTopic failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTopic failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteTopic failed: invalid message type")
		return
	}
	result := MTRMessageServiceDeleteTopicResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
//  - Group
func (p *MTRMessageServiceClient) CreateGroup(topic string, group string) (r int64, err error) {
	if err = p.sendCreateGroup(topic, group); err != nil {
		return
	}
	return p.recvCreateGroup()
}

func (p *MTRMessageServiceClient) sendCreateGroup(topic string, group string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceCreateGroupArgs{
		Topic: topic,
		Group: group,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvCreateGroup() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createGroup failed: invalid message type")
		return
	}
	result := MTRMessageServiceCreateGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Topic
//  - Group
func (p *MTRMessageServiceClient) DeleteGroup(topic string, group string) (r int64, err error) {
	if err = p.sendDeleteGroup(topic, group); err != nil {
		return
	}
	return p.recvDeleteGroup()
}

func (p *MTRMessageServiceClient) sendDeleteGroup(topic string, group string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteGroup", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceDeleteGroupArgs{
		Topic: topic,
		Group: group,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvDeleteGroup() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteGroup" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteGroup failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteGroup failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteGroup failed: invalid message type")
		return
	}
	result := MTRMessageServiceDeleteGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

func (p *MTRMessageServiceClient) FetchMonitorInfo() (r []*MTRMonitorInfo, err error) {
	if err = p.sendFetchMonitorInfo(); err != nil {
		return
	}
	return p.recvFetchMonitorInfo()
}

func (p *MTRMessageServiceClient) sendFetchMonitorInfo() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchMonitorInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MTRMessageServiceFetchMonitorInfoArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MTRMessageServiceClient) recvFetchMonitorInfo() (value []*MTRMonitorInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "fetchMonitorInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetchMonitorInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchMonitorInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetchMonitorInfo failed: invalid message type")
		return
	}
	result := MTRMessageServiceFetchMonitorInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.RpcException != nil {
		err = result.RpcException
		return
	}
	value = result.GetSuccess()
	return
}

type MTRMessageServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MTRMessageService
}

func (p *MTRMessageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MTRMessageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MTRMessageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMTRMessageServiceProcessor(handler MTRMessageService) *MTRMessageServiceProcessor {

	self20 := &MTRMessageServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self20.processorMap["produce"] = &mTRMessageServiceProcessorProduce{handler: handler}
	self20.processorMap["consume"] = &mTRMessageServiceProcessorConsume{handler: handler}
	self20.processorMap["consumeWithOffset"] = &mTRMessageServiceProcessorConsumeWithOffset{handler: handler}
	self20.processorMap["reConsumeByDate"] = &mTRMessageServiceProcessorReConsumeByDate{handler: handler}
	self20.processorMap["showTopicInfo"] = &mTRMessageServiceProcessorShowTopicInfo{handler: handler}
	self20.processorMap["createTopic"] = &mTRMessageServiceProcessorCreateTopic{handler: handler}
	self20.processorMap["deleteTopic"] = &mTRMessageServiceProcessorDeleteTopic{handler: handler}
	self20.processorMap["createGroup"] = &mTRMessageServiceProcessorCreateGroup{handler: handler}
	self20.processorMap["deleteGroup"] = &mTRMessageServiceProcessorDeleteGroup{handler: handler}
	self20.processorMap["fetchMonitorInfo"] = &mTRMessageServiceProcessorFetchMonitorInfo{handler: handler}
	return self20
}

func (p *MTRMessageServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x21 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x21.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x21

}

type mTRMessageServiceProcessorProduce struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorProduce) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceProduceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("produce", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceProduceResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.Produce(args.Msg, args.Flush); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing produce: "+err2.Error())
			oprot.WriteMessageBegin("produce", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("produce", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorConsume struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorConsume) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceConsumeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("consume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceConsumeResult{}
	var retval *MTRMessage
	var err2 error
	if retval, err2 = p.handler.Consume(args.Topic, args.Group); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing consume: "+err2.Error())
			oprot.WriteMessageBegin("consume", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("consume", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorConsumeWithOffset struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorConsumeWithOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceConsumeWithOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("consumeWithOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceConsumeWithOffsetResult{}
	var retval *MTRMessage
	var err2 error
	if retval, err2 = p.handler.ConsumeWithOffset(args.Topic, args.Offset); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing consumeWithOffset: "+err2.Error())
			oprot.WriteMessageBegin("consumeWithOffset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("consumeWithOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorReConsumeByDate struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorReConsumeByDate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceReConsumeByDateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reConsumeByDate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceReConsumeByDateResult{}
	var retval *MTRMessage
	var err2 error
	if retval, err2 = p.handler.ReConsumeByDate(args.Topic, args.BeginDate, args.EndDate); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reConsumeByDate: "+err2.Error())
			oprot.WriteMessageBegin("reConsumeByDate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("reConsumeByDate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorShowTopicInfo struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorShowTopicInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceShowTopicInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("showTopicInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceShowTopicInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ShowTopicInfo(args.Topic); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing showTopicInfo: "+err2.Error())
			oprot.WriteMessageBegin("showTopicInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("showTopicInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorCreateTopic struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorCreateTopic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceCreateTopicArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceCreateTopicResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.CreateTopic(args.Topic); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTopic: "+err2.Error())
			oprot.WriteMessageBegin("createTopic", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createTopic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorDeleteTopic struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorDeleteTopic) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceDeleteTopicArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTopic", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceDeleteTopicResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.DeleteTopic(args.Topic); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTopic: "+err2.Error())
			oprot.WriteMessageBegin("deleteTopic", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("deleteTopic", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorCreateGroup struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorCreateGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceCreateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceCreateGroupResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.CreateGroup(args.Topic, args.Group); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroup: "+err2.Error())
			oprot.WriteMessageBegin("createGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorDeleteGroup struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorDeleteGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceDeleteGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceDeleteGroupResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.DeleteGroup(args.Topic, args.Group); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteGroup: "+err2.Error())
			oprot.WriteMessageBegin("deleteGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("deleteGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mTRMessageServiceProcessorFetchMonitorInfo struct {
	handler MTRMessageService
}

func (p *mTRMessageServiceProcessorFetchMonitorInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MTRMessageServiceFetchMonitorInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchMonitorInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MTRMessageServiceFetchMonitorInfoResult{}
	var retval []*MTRMonitorInfo
	var err2 error
	if retval, err2 = p.handler.FetchMonitorInfo(); err2 != nil {
		switch v := err2.(type) {
		case *MTRRPCException:
			result.RpcException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchMonitorInfo: "+err2.Error())
			oprot.WriteMessageBegin("fetchMonitorInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchMonitorInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Msg
//  - Flush
type MTRMessageServiceProduceArgs struct {
	Msg   *MTRMessage `thrift:"msg,1" db:"msg" json:"msg"`
	Flush bool        `thrift:"flush,2" db:"flush" json:"flush"`
}

func NewMTRMessageServiceProduceArgs() *MTRMessageServiceProduceArgs {
	return &MTRMessageServiceProduceArgs{}
}

var MTRMessageServiceProduceArgs_Msg_DEFAULT *MTRMessage

func (p *MTRMessageServiceProduceArgs) GetMsg() *MTRMessage {
	if !p.IsSetMsg() {
		return MTRMessageServiceProduceArgs_Msg_DEFAULT
	}
	return p.Msg
}

func (p *MTRMessageServiceProduceArgs) GetFlush() bool {
	return p.Flush
}
func (p *MTRMessageServiceProduceArgs) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *MTRMessageServiceProduceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceProduceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Msg = &MTRMessage{}
	if err := p.Msg.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Msg), err)
	}
	return nil
}

func (p *MTRMessageServiceProduceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Flush = v
	}
	return nil
}

func (p *MTRMessageServiceProduceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("produce_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceProduceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := p.Msg.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Msg), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceProduceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flush", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:flush: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Flush)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flush (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:flush: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceProduceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceProduceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceProduceResult struct {
	Success      *int64           `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceProduceResult() *MTRMessageServiceProduceResult {
	return &MTRMessageServiceProduceResult{}
}

var MTRMessageServiceProduceResult_Success_DEFAULT int64

func (p *MTRMessageServiceProduceResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return MTRMessageServiceProduceResult_Success_DEFAULT
	}
	return *p.Success
}

var MTRMessageServiceProduceResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceProduceResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceProduceResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceProduceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceProduceResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceProduceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceProduceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MTRMessageServiceProduceResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceProduceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("produce_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceProduceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceProduceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceProduceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceProduceResult(%+v)", *p)
}

// Attributes:
//  - Topic
//  - Group
type MTRMessageServiceConsumeArgs struct {
	Topic string `thrift:"topic,1" db:"topic" json:"topic"`
	Group string `thrift:"group,2" db:"group" json:"group"`
}

func NewMTRMessageServiceConsumeArgs() *MTRMessageServiceConsumeArgs {
	return &MTRMessageServiceConsumeArgs{}
}

func (p *MTRMessageServiceConsumeArgs) GetTopic() string {
	return p.Topic
}

func (p *MTRMessageServiceConsumeArgs) GetGroup() string {
	return p.Group
}
func (p *MTRMessageServiceConsumeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceConsumeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *MTRMessageServiceConsumeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("consume_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceConsumeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceConsumeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceConsumeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceConsumeResult struct {
	Success      *MTRMessage      `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceConsumeResult() *MTRMessageServiceConsumeResult {
	return &MTRMessageServiceConsumeResult{}
}

var MTRMessageServiceConsumeResult_Success_DEFAULT *MTRMessage

func (p *MTRMessageServiceConsumeResult) GetSuccess() *MTRMessage {
	if !p.IsSetSuccess() {
		return MTRMessageServiceConsumeResult_Success_DEFAULT
	}
	return p.Success
}

var MTRMessageServiceConsumeResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceConsumeResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceConsumeResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceConsumeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceConsumeResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceConsumeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MTRMessage{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("consume_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceConsumeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceConsumeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceConsumeResult(%+v)", *p)
}

// Attributes:
//  - Topic
//  - Offset
type MTRMessageServiceConsumeWithOffsetArgs struct {
	Topic  string `thrift:"topic,1" db:"topic" json:"topic"`
	Offset int64  `thrift:"offset,2" db:"offset" json:"offset"`
}

func NewMTRMessageServiceConsumeWithOffsetArgs() *MTRMessageServiceConsumeWithOffsetArgs {
	return &MTRMessageServiceConsumeWithOffsetArgs{}
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) GetTopic() string {
	return p.Topic
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) GetOffset() int64 {
	return p.Offset
}
func (p *MTRMessageServiceConsumeWithOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("consumeWithOffset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceConsumeWithOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceConsumeWithOffsetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceConsumeWithOffsetResult struct {
	Success      *MTRMessage      `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceConsumeWithOffsetResult() *MTRMessageServiceConsumeWithOffsetResult {
	return &MTRMessageServiceConsumeWithOffsetResult{}
}

var MTRMessageServiceConsumeWithOffsetResult_Success_DEFAULT *MTRMessage

func (p *MTRMessageServiceConsumeWithOffsetResult) GetSuccess() *MTRMessage {
	if !p.IsSetSuccess() {
		return MTRMessageServiceConsumeWithOffsetResult_Success_DEFAULT
	}
	return p.Success
}

var MTRMessageServiceConsumeWithOffsetResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceConsumeWithOffsetResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceConsumeWithOffsetResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceConsumeWithOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceConsumeWithOffsetResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceConsumeWithOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MTRMessage{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("consumeWithOffset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceConsumeWithOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceConsumeWithOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceConsumeWithOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceConsumeWithOffsetResult(%+v)", *p)
}

// Attributes:
//  - Topic
//  - BeginDate
//  - EndDate
type MTRMessageServiceReConsumeByDateArgs struct {
	Topic     string `thrift:"topic,1" db:"topic" json:"topic"`
	BeginDate string `thrift:"beginDate,2" db:"beginDate" json:"beginDate"`
	EndDate   string `thrift:"endDate,3" db:"endDate" json:"endDate"`
}

func NewMTRMessageServiceReConsumeByDateArgs() *MTRMessageServiceReConsumeByDateArgs {
	return &MTRMessageServiceReConsumeByDateArgs{}
}

func (p *MTRMessageServiceReConsumeByDateArgs) GetTopic() string {
	return p.Topic
}

func (p *MTRMessageServiceReConsumeByDateArgs) GetBeginDate() string {
	return p.BeginDate
}

func (p *MTRMessageServiceReConsumeByDateArgs) GetEndDate() string {
	return p.EndDate
}
func (p *MTRMessageServiceReConsumeByDateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BeginDate = v
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EndDate = v
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reConsumeByDate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceReConsumeByDateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("beginDate", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:beginDate: ", p), err)
	}
	if err := oprot.WriteString(string(p.BeginDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.beginDate (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:beginDate: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceReConsumeByDateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endDate", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endDate: ", p), err)
	}
	if err := oprot.WriteString(string(p.EndDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endDate (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endDate: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceReConsumeByDateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceReConsumeByDateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceReConsumeByDateResult struct {
	Success      *MTRMessage      `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceReConsumeByDateResult() *MTRMessageServiceReConsumeByDateResult {
	return &MTRMessageServiceReConsumeByDateResult{}
}

var MTRMessageServiceReConsumeByDateResult_Success_DEFAULT *MTRMessage

func (p *MTRMessageServiceReConsumeByDateResult) GetSuccess() *MTRMessage {
	if !p.IsSetSuccess() {
		return MTRMessageServiceReConsumeByDateResult_Success_DEFAULT
	}
	return p.Success
}

var MTRMessageServiceReConsumeByDateResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceReConsumeByDateResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceReConsumeByDateResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceReConsumeByDateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceReConsumeByDateResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceReConsumeByDateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MTRMessage{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reConsumeByDate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceReConsumeByDateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceReConsumeByDateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceReConsumeByDateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceReConsumeByDateResult(%+v)", *p)
}

// Attributes:
//  - Topic
type MTRMessageServiceShowTopicInfoArgs struct {
	Topic string `thrift:"topic,1" db:"topic" json:"topic"`
}

func NewMTRMessageServiceShowTopicInfoArgs() *MTRMessageServiceShowTopicInfoArgs {
	return &MTRMessageServiceShowTopicInfoArgs{}
}

func (p *MTRMessageServiceShowTopicInfoArgs) GetTopic() string {
	return p.Topic
}
func (p *MTRMessageServiceShowTopicInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceShowTopicInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceShowTopicInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("showTopicInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceShowTopicInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceShowTopicInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceShowTopicInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceShowTopicInfoResult struct {
	Success      *string          `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceShowTopicInfoResult() *MTRMessageServiceShowTopicInfoResult {
	return &MTRMessageServiceShowTopicInfoResult{}
}

var MTRMessageServiceShowTopicInfoResult_Success_DEFAULT string

func (p *MTRMessageServiceShowTopicInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return MTRMessageServiceShowTopicInfoResult_Success_DEFAULT
	}
	return *p.Success
}

var MTRMessageServiceShowTopicInfoResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceShowTopicInfoResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceShowTopicInfoResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceShowTopicInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceShowTopicInfoResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceShowTopicInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceShowTopicInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MTRMessageServiceShowTopicInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceShowTopicInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("showTopicInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceShowTopicInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceShowTopicInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceShowTopicInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceShowTopicInfoResult(%+v)", *p)
}

// Attributes:
//  - Topic
type MTRMessageServiceCreateTopicArgs struct {
	Topic string `thrift:"topic,1" db:"topic" json:"topic"`
}

func NewMTRMessageServiceCreateTopicArgs() *MTRMessageServiceCreateTopicArgs {
	return &MTRMessageServiceCreateTopicArgs{}
}

func (p *MTRMessageServiceCreateTopicArgs) GetTopic() string {
	return p.Topic
}
func (p *MTRMessageServiceCreateTopicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceCreateTopicArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceCreateTopicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTopic_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceCreateTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceCreateTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceCreateTopicArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceCreateTopicResult struct {
	Success      *int64           `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceCreateTopicResult() *MTRMessageServiceCreateTopicResult {
	return &MTRMessageServiceCreateTopicResult{}
}

var MTRMessageServiceCreateTopicResult_Success_DEFAULT int64

func (p *MTRMessageServiceCreateTopicResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return MTRMessageServiceCreateTopicResult_Success_DEFAULT
	}
	return *p.Success
}

var MTRMessageServiceCreateTopicResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceCreateTopicResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceCreateTopicResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceCreateTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceCreateTopicResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceCreateTopicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceCreateTopicResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MTRMessageServiceCreateTopicResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceCreateTopicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTopic_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceCreateTopicResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceCreateTopicResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceCreateTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceCreateTopicResult(%+v)", *p)
}

// Attributes:
//  - Topic
type MTRMessageServiceDeleteTopicArgs struct {
	Topic string `thrift:"topic,1" db:"topic" json:"topic"`
}

func NewMTRMessageServiceDeleteTopicArgs() *MTRMessageServiceDeleteTopicArgs {
	return &MTRMessageServiceDeleteTopicArgs{}
}

func (p *MTRMessageServiceDeleteTopicArgs) GetTopic() string {
	return p.Topic
}
func (p *MTRMessageServiceDeleteTopicArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteTopicArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceDeleteTopicArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopic_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteTopicArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceDeleteTopicArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceDeleteTopicArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceDeleteTopicResult struct {
	Success      *int64           `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceDeleteTopicResult() *MTRMessageServiceDeleteTopicResult {
	return &MTRMessageServiceDeleteTopicResult{}
}

var MTRMessageServiceDeleteTopicResult_Success_DEFAULT int64

func (p *MTRMessageServiceDeleteTopicResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return MTRMessageServiceDeleteTopicResult_Success_DEFAULT
	}
	return *p.Success
}

var MTRMessageServiceDeleteTopicResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceDeleteTopicResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceDeleteTopicResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceDeleteTopicResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceDeleteTopicResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceDeleteTopicResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteTopicResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MTRMessageServiceDeleteTopicResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteTopicResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTopic_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteTopicResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceDeleteTopicResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceDeleteTopicResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceDeleteTopicResult(%+v)", *p)
}

// Attributes:
//  - Topic
//  - Group
type MTRMessageServiceCreateGroupArgs struct {
	Topic string `thrift:"topic,1" db:"topic" json:"topic"`
	Group string `thrift:"group,2" db:"group" json:"group"`
}

func NewMTRMessageServiceCreateGroupArgs() *MTRMessageServiceCreateGroupArgs {
	return &MTRMessageServiceCreateGroupArgs{}
}

func (p *MTRMessageServiceCreateGroupArgs) GetTopic() string {
	return p.Topic
}

func (p *MTRMessageServiceCreateGroupArgs) GetGroup() string {
	return p.Group
}
func (p *MTRMessageServiceCreateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceCreateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceCreateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceCreateGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceCreateGroupResult struct {
	Success      *int64           `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceCreateGroupResult() *MTRMessageServiceCreateGroupResult {
	return &MTRMessageServiceCreateGroupResult{}
}

var MTRMessageServiceCreateGroupResult_Success_DEFAULT int64

func (p *MTRMessageServiceCreateGroupResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return MTRMessageServiceCreateGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var MTRMessageServiceCreateGroupResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceCreateGroupResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceCreateGroupResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceCreateGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceCreateGroupResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceCreateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceCreateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceCreateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceCreateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceCreateGroupResult(%+v)", *p)
}

// Attributes:
//  - Topic
//  - Group
type MTRMessageServiceDeleteGroupArgs struct {
	Topic string `thrift:"topic,1" db:"topic" json:"topic"`
	Group string `thrift:"group,2" db:"group" json:"group"`
}

func NewMTRMessageServiceDeleteGroupArgs() *MTRMessageServiceDeleteGroupArgs {
	return &MTRMessageServiceDeleteGroupArgs{}
}

func (p *MTRMessageServiceDeleteGroupArgs) GetTopic() string {
	return p.Topic
}

func (p *MTRMessageServiceDeleteGroupArgs) GetGroup() string {
	return p.Group
}
func (p *MTRMessageServiceDeleteGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteGroup_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topic: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceDeleteGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err)
	}
	return err
}

func (p *MTRMessageServiceDeleteGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceDeleteGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceDeleteGroupResult struct {
	Success      *int64           `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceDeleteGroupResult() *MTRMessageServiceDeleteGroupResult {
	return &MTRMessageServiceDeleteGroupResult{}
}

var MTRMessageServiceDeleteGroupResult_Success_DEFAULT int64

func (p *MTRMessageServiceDeleteGroupResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return MTRMessageServiceDeleteGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var MTRMessageServiceDeleteGroupResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceDeleteGroupResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceDeleteGroupResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceDeleteGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceDeleteGroupResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceDeleteGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteGroup_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceDeleteGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceDeleteGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceDeleteGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceDeleteGroupResult(%+v)", *p)
}

type MTRMessageServiceFetchMonitorInfoArgs struct {
}

func NewMTRMessageServiceFetchMonitorInfoArgs() *MTRMessageServiceFetchMonitorInfoArgs {
	return &MTRMessageServiceFetchMonitorInfoArgs{}
}

func (p *MTRMessageServiceFetchMonitorInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceFetchMonitorInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchMonitorInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceFetchMonitorInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceFetchMonitorInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RpcException
type MTRMessageServiceFetchMonitorInfoResult struct {
	Success      []*MTRMonitorInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
	RpcException *MTRRPCException  `thrift:"rpcException,1" db:"rpcException" json:"rpcException,omitempty"`
}

func NewMTRMessageServiceFetchMonitorInfoResult() *MTRMessageServiceFetchMonitorInfoResult {
	return &MTRMessageServiceFetchMonitorInfoResult{}
}

var MTRMessageServiceFetchMonitorInfoResult_Success_DEFAULT []*MTRMonitorInfo

func (p *MTRMessageServiceFetchMonitorInfoResult) GetSuccess() []*MTRMonitorInfo {
	return p.Success
}

var MTRMessageServiceFetchMonitorInfoResult_RpcException_DEFAULT *MTRRPCException

func (p *MTRMessageServiceFetchMonitorInfoResult) GetRpcException() *MTRRPCException {
	if !p.IsSetRpcException() {
		return MTRMessageServiceFetchMonitorInfoResult_RpcException_DEFAULT
	}
	return p.RpcException
}
func (p *MTRMessageServiceFetchMonitorInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MTRMessageServiceFetchMonitorInfoResult) IsSetRpcException() bool {
	return p.RpcException != nil
}

func (p *MTRMessageServiceFetchMonitorInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MTRMessageServiceFetchMonitorInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MTRMonitorInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &MTRMonitorInfo{}
		if err := _elem22.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.Success = append(p.Success, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MTRMessageServiceFetchMonitorInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.RpcException = &MTRRPCException{}
	if err := p.RpcException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RpcException), err)
	}
	return nil
}

func (p *MTRMessageServiceFetchMonitorInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchMonitorInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MTRMessageServiceFetchMonitorInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceFetchMonitorInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRpcException() {
		if err := oprot.WriteFieldBegin("rpcException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rpcException: ", p), err)
		}
		if err := p.RpcException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RpcException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rpcException: ", p), err)
		}
	}
	return err
}

func (p *MTRMessageServiceFetchMonitorInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTRMessageServiceFetchMonitorInfoResult(%+v)", *p)
}
